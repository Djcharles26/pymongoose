{
	"Pymongoose Model":{
		"prefix": "pymodel",
		"body": [
			"import datetime",
			"from pymongoose import methods",
			"from pymongoose.types import Types, Schema, MongoException, MongoError",
			"from bson import json_util",
			"from bson.objectid import ObjectId",
			"",
			"${1:model}s = None",
			"",
			"def ${1:model}_model_init (db):",
			"    global ${1:model}s",
			"    ${1:model}s = db[\"${1:model}s\"]",
			"",
			"class ${2:Model}(Schema):",
			"    $3",
			"",
			"    def __init__(self, **kwargs):",
			"         self.schema = {$4}",
			"",
			"         if not \"empty\" in kwargs:",
			"              self.id = ObjectId()",
			"              $5",
			"",
			"         self.iat = 0",
			"         self.items_count = 0",
			"",
			"    def __str__(self):",
			"         return f\"$6\"",
			"",
			"    def fromJson(self, json_obj):",
			"         self.id = super().extract(\"_id\", json_obj)",
			"         $7",
			"",
			"    def toJson(self, full = True):",
			"         json_obj =  {",
			"              $8",
			"         }",
			"         if full:",
			"              json_obj[\"id\"] = self.id",
			"         return super().convert_json(json_obj) if full else json_obj",
			"",
			"",
			"    def save(self, id = None):",
			"         if not super().validate_required(self.toJson(), super().schema):",
			"              raise MongoException(message=\"Required fields missing\", mongoError=MongoError.Required_field)",
			"         else:",
			"              json_obj = self.toJson(False)",
			"              if id is not None:",
			"                    json_obj[\"_id\"] = id",
			"",
			"              self.id = ${1:model}s.insert(json_obj)",
			"         return self.id",
			"",
			"    @staticmethod",
			"    def exists(query):",
			"         global ${1:model}s",
			"         retval = methods.exists(${1:model}s, query)",
			"         return retval",
			"    @staticmethod",
			"    def find(query, select = None, populate=None, one=False):",
			"         global ${1:model}s",
			"         retval = methods.find(${1:model}s, ${2:Model}.schema, query, select, populate, one)",
			"         if one:",
			"              if retval is not None: ",
			"                    retval = ${2:Model}.parse(retval)",
			"         return retval",
			"",
			"    @staticmethod",
			"    def find_by_id(id, select = None, populate=None):",
			"         global ${1:model}s",
			"         retval = methods.find_by_id(${1:model}s, ${2:Model}.schema, id, select, populate)",
			"         if retval is not None: ",
			"                retval = ${2:Model}.parse(retval)",
			"         return ${2:Model}.parse(retval)",
			"",
			"    @staticmethod",
			"    def update(query, update, many = False):",
			"        global ${1:model}s",
			"        retval = methods.update(${1:model}s, query, update, many)",
			"        return retval",
			"",
			"    @staticmethod",
			"    def delete(query, many = False):",
			"        global ${1:model}s",
			"        retval = methods.delete(${1:model}s, query, many)",
			"      return retval",
			"",
			"    @staticmethod",
			"    def parse(dictionary):",
			"        ${1:model} = ${2:Model}()",
			"        ${1:model}.fromJson(dictionary)",
			"        return ${1:model}"
		]
	}
}